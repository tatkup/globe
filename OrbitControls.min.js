/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/@finsweet/3dglobes@1.0.0/OrbitControls.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
console.warn("THREE.OrbitControls: As part of the transition to ES6 Modules, the files in 'examples/js' were deprecated in May 2020 (r117) and will be deleted in December 2020 (r124). You can find more information about developing using ES6 Modules in https://threejs.org/docs/index.html#manual/en/introduction/Import-via-modules."), THREE.OrbitControls = function (e, t) {
    var o, n, a, i, s;
    void 0 === t && console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'), t === document && console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'), this.object = e, this.domElement = t, this.enabled = !0, this.target = new THREE.Vector3, this.minDistance = 0, this.maxDistance = 1 / 0, this.minZoom = 0, this.maxZoom = 1 / 0, this.minPolarAngle = 0, this.maxPolarAngle = Math.PI, this.minAzimuthAngle = -1 / 0, this.maxAzimuthAngle = 1 / 0, this.enableDamping = !1, this.dampingFactor = .05, this.enableZoom = !0, this.zoomSpeed = 1, this.enableRotate = !0, this.rotateSpeed = 1, this.enablePan = !0, this.panSpeed = 1, this.screenSpacePanning = !1, this.keyPanSpeed = 7, this.autoRotate = false; // Disable auto-rotation
    this.autoRotateSpeed = 0; // Set auto-rotation speed to 0 (optional)
    this.enableKeys = !0, this.keys = {
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        BOTTOM: 40
    }, this.mouseButtons = {
        LEFT: THREE.MOUSE.ROTATE,
        MIDDLE: THREE.MOUSE.DOLLY,
        RIGHT: THREE.MOUSE.PAN
    }, this.touches = {
        ONE: THREE.TOUCH.ROTATE,
        TWO: THREE.TOUCH.DOLLY_PAN
    }, this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom, this.getPolarAngle = function () {
        return p.phi
    }, this.getAzimuthalAngle = function () {
        return p.theta
    }, this.saveState = function () {
        r.target0.copy(r.target), r.position0.copy(r.object.position), r.zoom0 = r.object.zoom
    }, this.reset = function () {
        r.target.copy(r.target0), r.object.position.copy(r.position0), r.object.zoom = r.zoom0, r.object.updateProjectionMatrix(), r.dispatchEvent(c), r.update(), E = m.NONE
    },
    // ... (remaining code)
    this.dispose = function () {
        r.domElement.removeEventListener("contextmenu", $, !1), r.domElement.removeEventListener("mousedown", F, !1), r.domElement.removeEventListener("wheel", K, !1), r.domElement.removeEventListener("touchstart", q, !1), r.domElement.removeEventListener("touchend", J, !1), r.domElement.removeEventListener("touchmove", Q, !1), document.removeEventListener("mousemove", B, !1), document.removeEventListener("mouseup", G, !1), r.domElement.removeEventListener("keydown", W, !1)
    };
    var r = this,
        c = {
            type: "change"
        },
        u = {
            type: "start"
        },
        l = {
            type: "end"
        },
        m = {
            NONE: -1,
            ROTATE: 0,
            DOLLY: 1,
            PAN: 2,
            TOUCH_ROTATE: 3,
            TOUCH_PAN: 4,
            TOUCH_DOLLY_PAN: 5,
            TOUCH_DOLLY_ROTATE: 6
        },
        E = m.NONE,
        h = 1e-6,
        p = new THREE.Spherical,
        d = new THREE.Spherical,
        b = 1,
        T = new THREE.Vector3,
        O = !1,
        f = new THREE.Vector2,
        g = new THREE.Vector2,
        R = new THREE.Vector2,
        H = new THREE.Vector2,
        v = new THREE.Vector2,
        y = new THREE.Vector2,
        P = new THREE.Vector2,
        L = new THREE.Vector2,
        A = new THREE.Vector2;
    // ... (remaining code)
    r.domElement.addEventListener("contextmenu", $, !1), r.domElement.addEventListener("mousedown", F, !1), r.domElement.addEventListener("wheel", K, !1), r.domElement.addEventListener("touchstart", q, !1), r.domElement.addEventListener("touchend", J, !1), r.domElement.addEventListener("touchmove", Q, !1), r.domElement.addEventListener("keydown", W, !1), -1 === r.domElement.tabIndex && (r.domElement.tabIndex = 0), this.update()
}, THREE.OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype), THREE.OrbitControls.prototype.constructor = THREE.OrbitControls, THREE.MapControls = function (e, t) {
    THREE.OrbitControls.call(this, e, t), this.mouseButtons.LEFT = THREE.MOUSE.PAN, this.mouseButtons.RIGHT = THREE.MOUSE.ROTATE, this.touches.ONE = THREE.TOUCH.PAN, this.touches.TWO = THREE.TOUCH.DOLLY_ROTATE
}, THREE.MapControls.prototype = Object.create(THREE.EventDispatcher.prototype), THREE.MapControls.prototype.constructor = THREE.MapControls;
